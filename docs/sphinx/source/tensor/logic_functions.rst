Logic functions
===============

.. note::

    Section in progress

    Read this: https://github.com/deephealthproject/eddl/blob/master/docs/markdown/eddl_progress_tensor.md


Truth value testing
---------------------------


All
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::all

.. code-block:: c++

    Tensor* t1 = new Tensor::Tensor({true,false,false,false,true,true}, {6}, DEV_CPU);
    bool condition =  Tensor::all(t1);
    //condition = false
    

Any
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::any

.. code-block:: c++

    Tensor* t1 = new Tensor::Tensor({true,false,false,false,true,true}, {6}, DEV_CPU);
    Tensor* t2 = new Tensor::Tensor({false,false,false,false,false,false}, {6}, DEV_CPU);

    bool condition =  Tensor::any(t1);
    //condition = true

    bool condition2 =  Tensor::any(t2);
    //condition2 = false


Array contents
-----------------



Isfinite
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::isfinite

.. code-block:: c++

    Tensor* t1 = Tensor::empty({5,1});
    t1->ptr[0] = 12;
    t1->ptr[1] = INFINITY;
    t1->ptr[2] = NAN;
    t1->ptr[3] = -INFINITY;
    t1->ptr[4] = +INFINITY;
    // [
    // [12.00]
    // [inf]
    // [nan]
    // [-inf]
    // [inf]
    // ]

    Tensor* r1 = nullptr;
    Tensor::isfinite(t1, r1); //source
    // [
    // [1.00]
    // [0.00]
    // [0.00]
    // [0.00]
    // [0.00]
    // ]

    

Isinf
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::isinf

.. code-block:: c++

    Tensor* t1 = Tensor::empty({5,1});
    t1->ptr[0] = 12;
    t1->ptr[1] = INFINITY;
    t1->ptr[2] = NAN;
    t1->ptr[3] = -INFINITY;
    t1->ptr[4] = +INFINITY;
    // [
    // [12.00]
    // [inf]
    // [nan]
    // [-inf]
    // [inf]
    // ]

    Tensor* r1 = nullptr;
    Tensor::isinf(t1, r1); //source
    // [
    // [0.00]
    // [1.00]
    // [0.00]
    // [1.00]
    // [1.00]
    // ]

Isnan
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::isnan

.. code-block:: c++

    Tensor* t1 = Tensor::empty({5,1});
    t1->ptr[0] = 12;
    t1->ptr[1] = INFINITY;
    t1->ptr[2] = NAN;
    t1->ptr[3] = -INFINITY;
    t1->ptr[4] = +INFINITY;
    // [
    // [12.00]
    // [inf]
    // [nan]
    // [-inf]
    // [inf]
    // ]

    Tensor* r1 = nullptr;
    Tensor::isnan(t1, r1); //source
    // [
    // [0.00]
    // [0.00]
    // [1.00]
    // [0.00]
    // [0.00]
    // ]
    

Isneginf
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::isneginf

.. code-block:: c++

    Tensor* t1 = Tensor::empty({5,1});
    t1->ptr[0] = 12;
    t1->ptr[1] = INFINITY;
    t1->ptr[2] = NAN;
    t1->ptr[3] = -INFINITY;
    t1->ptr[4] = +INFINITY;
    // [
    // [12.00]
    // [inf]
    // [nan]
    // [-inf]
    // [inf]
    // ]

    Tensor* r1 = nullptr;
    Tensor::isneginf(t1, r1); //source
    // [
    // [0.00]
    // [0.00]
    // [0.00]
    // [1.00]
    // [0.00]
    // ]
    

Isposinf
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::isposinf

.. code-block:: c++

    Tensor* t1 = Tensor::empty({5,1});
    t1->ptr[0] = 12;
    t1->ptr[1] = INFINITY;
    t1->ptr[2] = NAN;
    t1->ptr[3] = -INFINITY;
    t1->ptr[4] = +INFINITY;
    // [
    // [12.00]
    // [inf]
    // [nan]
    // [-inf]
    // [inf]
    // ]

    Tensor* r1 = nullptr;
    Tensor::isposinf(t1, r1); //source
    // [
    // [0.00]
    // [1.00]
    // [0.00]
    // [0.00]
    // [1.00]
    // ]



Logical operations
---------------------------


Logical_and
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::logical_and

.. code-block:: c++

    Tensor* t1 = Tensor::full({5,5}, 1.0f);
    // [
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // ]


    Tensor* t2 = Tensor::full({5,5}, 0.0f);
    // [
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // ]

    Tensor* r = nullptr;

    Tensor::logical_and(t1, t2, r); //source
    // [
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // ]
        

Logical_or
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::logical_or

.. code-block:: c++

    Tensor* t1 = Tensor::full({5,5}, 1.0f);
    // [
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // ]


    Tensor* t2 = Tensor::full({5,5}, 0.0f);
    // [
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // ]

    Tensor* r = nullptr;

    Tensor::logical_or(t1, t2, r); //source
    // [
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // ]
        

Logical_not
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::logical_not

.. code-block:: c++

    Tensor* t1 = Tensor::full({5,5}, 1.0f);
    // [
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // ]

    Tensor* r = nullptr;

    Tensor::logical_not(t1, r); //source
    // [
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // ]
        

Logical_xor
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::logical_xor

.. code-block:: c++

    Tensor* t1 = Tensor::full({5,5}, 1.0f);
    // [
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // ]


    Tensor* t2 = Tensor::full({5,5}, 0.0f);
    // [
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // [0.000000 0.000000 0.000000 0.000000 0.000000]
    // ]

    Tensor* r = nullptr;

    Tensor::logical_xor(t1, t2, r); //source
    // [
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // ]



Comparison
---------------------------

Unary Operations
^^^^^^^^^^^^^^^^^^^^
Greater
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::greater(float v)

 
.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0f, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.00 2.00 3.00 4.00 5.00]
    // [6.00 7.00 8.00 9.00 10.00]
    // [11.00 12.00 13.00 14.00 15.00]
    // [16.00 17.00 18.00 19.00 20.00]
    // [21.00 22.00 23.00 24.00 25.00]
    // ]

    t1->greater_(3.0f); // In-place
    // [
    // [0.00 0.00 0.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // ]

    // Other Ways
    Tensor* t2 = t1->greater(3.0f); // returns new tensor
    Tensor::greater(t1, t2, 3.0f); //source


Greater_equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::greater_equal(float v)


.. code-block:: c++


    Tensor* t1 = Tensor::range(1.0f, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.00 2.00 3.00 4.00 5.00]
    // [6.00 7.00 8.00 9.00 10.00]
    // [11.00 12.00 13.00 14.00 15.00]
    // [16.00 17.00 18.00 19.00 20.00]
    // [21.00 22.00 23.00 24.00 25.00]
    // ]

    t1->greater_equal_(3.0f); // In-place
    // [
    // [0.00 0.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // ]

    // Other Ways
    Tensor* t2 = t1->greater_equal(3.0f); // returns new tensor
    Tensor::greater_equal(t1, t2, 3.0f); //source




Less
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::less(float v)

.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0f, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.00 2.00 3.00 4.00 5.00]
    // [6.00 7.00 8.00 9.00 10.00]
    // [11.00 12.00 13.00 14.00 15.00]
    // [16.00 17.00 18.00 19.00 20.00]
    // [21.00 22.00 23.00 24.00 25.00]
    // ]

    t1->less_(3.0f); // In-place
    // [
    // [1.00 1.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // ]

    // Other Ways
    Tensor* t2 = t1->less(3.0f); // returns new tensor
    Tensor::less_(t1, t2, 3.0f); //source



Less_equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::less_equal(float v)


.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0f, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.00 2.00 3.00 4.00 5.00]
    // [6.00 7.00 8.00 9.00 10.00]
    // [11.00 12.00 13.00 14.00 15.00]
    // [16.00 17.00 18.00 19.00 20.00]
    // [21.00 22.00 23.00 24.00 25.00]
    // ]

    t1->less_equal_(3.0f); // In-place
    // [
    // [1.00 1.00 1.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // ]

    // Other Ways
    Tensor* t2 = t1->less_equal(3.0f); // returns new tensor
    Tensor::less_equal(t1, t2, 3.0f); //source
    


Equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::equal(float v)


.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0f, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.00 2.00 3.00 4.00 5.00]
    // [6.00 7.00 8.00 9.00 10.00]
    // [11.00 12.00 13.00 14.00 15.00]
    // [16.00 17.00 18.00 19.00 20.00]
    // [21.00 22.00 23.00 24.00 25.00]
    // ]

    t1->equal_(3.0f); // In-place
    // [
    // [0.00 0.00 1.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // ]

    // Other Ways
    Tensor* t2 = t1->equal(3.0f); // returns new tensor
    Tensor::equal(t1, t2, 3.0f); //source


    
        

Not_equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::not_equal(float v)



.. code-block:: c++


    Tensor* t1 = Tensor::range(1.0f, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.00 2.00 3.00 4.00 5.00]
    // [6.00 7.00 8.00 9.00 10.00]
    // [11.00 12.00 13.00 14.00 15.00]
    // [16.00 17.00 18.00 19.00 20.00]
    // [21.00 22.00 23.00 24.00 25.00]
    // ]

    t1->not_equal_(3.0f); // In-place
    // [
    // [1.00 1.00 0.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // ]

    // Other Ways
    Tensor* t2 = t1->not_equal(3.0f); // returns new tensor
    Tensor::not_equal(t1, t2, 3.0f); //source



Binary Operations
^^^^^^^^^^^^^^^^^^^^^


Allclose
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::allclose

.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    float result = Tensor::allclose(t1, t2);
    // 1.00
    

Isclose
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::isclose

.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    Tensor* t3 = new Tensor({5,5});


    Tensor::isclose(t1, t2, t3);  
    // [
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // [1.000000 1.000000 1.000000 1.000000 1.000000]
    // ]

        

Greater
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::greater(Tensor *A)

 
.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    Tensor* t3 = t1->greater(t2); // returns new tensor
    // [
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // ]

    // Other Ways
    Tensor::greaterl(t1, t2, t3); //source


Greater_equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::greater_equal(Tensor *A)


.. code-block:: c++


    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    Tensor* t3 = t1->greater_equal(t2); // returns new tensor
    // [
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // ]

    // Other Ways
    Tensor::greater_equal(t1, t2, t3); //source




Less
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::less(Tensor *A)

.. code-block:: c++

    
    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    Tensor* t3 = t1->less(t2); // returns new tensor
    // [
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // ]

    // Other Ways
    Tensor::less(t1, t2, t3); //source



Less_equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::less_equal(Tensor *A)


.. code-block:: c++

    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    Tensor* t3 = t1->less_equal(t2); // returns new tensor
    // [
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // ]

    // Other Ways
    Tensor::less_equal(t1, t2, t3); //source


Equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::equal(Tensor *A)


.. code-block:: c++
    
    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    Tensor* t3 = t1->equal(t2); // returns new tensor
    // [
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // [1.00 1.00 1.00 1.00 1.00]
    // ]

    // Other Ways
    Tensor::equal(t1, t2, t3); //source


    
        

Not_equal
^^^^^^^^^^^^^^

.. doxygenfunction:: Tensor::not_equal(Tensor *A)


.. code-block:: c++


    Tensor* t1 = Tensor::range(1.0, 25.0f, 1);
    t1->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]


    Tensor* t2 = Tensor::range(1.0, 25.0f, 1);
    t2->reshape_({5,5});
    // [
    // [1.000000 2.000000 3.000000 4.000000 5.000000]
    // [6.000000 7.000000 8.000000 9.000000 10.000000]
    // [11.000000 12.000000 13.000000 14.000000 15.000000]
    // [16.000000 17.000000 18.000000 19.000000 20.000000]
    // [21.000000 22.000000 23.000000 24.000000 25.000000]
    // ]

    Tensor* t3 = t1->not_equal(t2); // returns new tensor
    // [
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // [0.00 0.00 0.00 0.00 0.00]
    // ]

    // Other Ways
    Tensor::not_equal(t1, t2, t3); //source

